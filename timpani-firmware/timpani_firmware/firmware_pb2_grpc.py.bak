# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import firmware_pb2 as firmware__pb2


class firmwareServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.action = channel.unary_unary(
                '/timpani_firmware.firmwareService/action',
                request_serializer=firmware__pb2.ActionRequest.SerializeToString,
                response_deserializer=firmware__pb2.ActionResponse.FromString,
                )
        self.register = channel.unary_unary(
                '/timpani_firmware.firmwareService/register',
                request_serializer=firmware__pb2.ResgisterRequest.SerializeToString,
                response_deserializer=firmware__pb2.ResgisterResponse.FromString,
                )


class firmwareServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def action(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_firmwareServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'action': grpc.unary_unary_rpc_method_handler(
                    servicer.action,
                    request_deserializer=firmware__pb2.ActionRequest.FromString,
                    response_serializer=firmware__pb2.ActionResponse.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=firmware__pb2.ResgisterRequest.FromString,
                    response_serializer=firmware__pb2.ResgisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'timpani_firmware.firmwareService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class firmwareService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def action(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/timpani_firmware.firmwareService/action',
            firmware__pb2.ActionRequest.SerializeToString,
            firmware__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/timpani_firmware.firmwareService/register',
            firmware__pb2.ResgisterRequest.SerializeToString,
            firmware__pb2.ResgisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
